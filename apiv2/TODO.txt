- Optimize sound serialization in search and similarity responses. We do not need to query for every sound.
Use select related. Ex:
            sounds = []
            objects_per_sound_ids = dict()
            ids = []
            for object in page['object_list']:
                objects_per_sound_ids[object['id']] = object
                ids.append(object['id'])

            qs = Sound.objects.select_related('user', 'pack', 'license').filter(id__in=ids)
            for s in qs:
                sid = s.id
                sound = SoundListSerializer(s, context=self.get_serializer_context()).data
                if 'more_from_pack' in objects_per_sound_ids[sid].keys():
                    if objects_per_sound_ids[sid]['more_from_pack'] > 0:
                        sound['more_from_same_pack'] = search_form.construct_link(reverse('apiv2-sound-search'), page=1, filter='grouping_pack:"%i_%s"' % (int(objects_per_sound_ids[sid]['pack_id']), objects_per_sound_ids[sid]['pack_name']), group_by_pack='0')
                        sound['n_from_same_pack'] = objects_per_sound_ids[sid]['more_from_pack'] + 1  # we add one as is the sound itself
                sounds.append(sound)

- Improve log handling (for errors, etc...)
- Write documentation
- Clean code (imports, utils...)
- Clean up expired grants from database with a django command
- Sporadic server errors on combined search?
- TEST TEST TEST!!!

