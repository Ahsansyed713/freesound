package  {    import flash.events.Event;    import flash.events.EventDispatcher;    import flash.events.IOErrorEvent;    import flash.events.ProgressEvent;    import flash.events.TimerEvent;    import flash.media.Sound;    import flash.media.SoundChannel;    import flash.net.URLRequest;    import flash.utils.Timer;            public class BasicSoundManager extends EventDispatcher implements ISoundManager    {        private var _soundUrl : String;        private var _sound : Sound;        private var _soundChannel : SoundChannel;        private var _timer : Timer;        private var _loop : Boolean;        private var _lastPosition : Number;        private var _isPlaying : Boolean;        private static const TIMER_DELAY : int = 50;        public function BasicSoundManager(soundUrl : String) : void        {            _lastPosition = 0;            _isPlaying = false;            _soundUrl = soundUrl;            _sound = new Sound(new URLRequest(_soundUrl));            _sound.addEventListener(Event.COMPLETE, onSoundLoadComplete);            _sound.addEventListener(IOErrorEvent.IO_ERROR, onSoundIoError);            _sound.addEventListener(ProgressEvent.PROGRESS, onSoundLoadProgress);                        _timer = new Timer(TIMER_DELAY);            _timer.addEventListener(TimerEvent.TIMER, onTimerEvent);            _timer.start();        }                public function set loop(on:Boolean):void        {        	_loop = on;        }                public function get loop():Boolean        {        	return _loop;        }        public function play() : void        {            if (_isPlaying) return;                    	if (_soundChannel)        	{        		_soundChannel.removeEventListener(Event.SOUND_COMPLETE, onSoundPlayComplete);        		_soundChannel = null;        	}            _soundChannel = _sound.play(_lastPosition);            _soundChannel.addEventListener(Event.SOUND_COMPLETE, onSoundPlayComplete);            _isPlaying = true;            dispatchEvent(new SoundManagerEvent(0, SoundManagerEvent.PLAY_EVENT));        }                public function get playing():Boolean        {        	return _isPlaying;        }                public function pause():void        {        	_lastPosition = _soundChannel.position;        	_soundChannel.stop();            _isPlaying = false;            dispatchEvent(new SoundManagerEvent(0, SoundManagerEvent.PAUSE_EVENT));        }                public function stop():void        {            _lastPosition = 0;        	_soundChannel.stop();            _isPlaying = false;            dispatchEvent(new SoundManagerEvent(0, SoundManagerEvent.PLAYING_PROGRESS_EVENT));            dispatchEvent(new SoundManagerEvent(0, SoundManagerEvent.STOP_EVENT));        }                private function onSoundLoadProgress(event : ProgressEvent) : void         {            var progress : Number = _sound.bytesLoaded / _sound.bytesTotal;            dispatchEvent(new SoundManagerEvent(progress, SoundManagerEvent.LOADING_PROGRESS_EVENT));        }        private function onSoundLoadComplete(event : Event) : void        {	        dispatchEvent(new SoundManagerEvent(1.0, SoundManagerEvent.LOADING_COMPLETE_EVENT));        }        private function onTimerEvent(e : TimerEvent) : void        {            if (_sound && _soundChannel && _isPlaying)        	{                var progress:Number = _soundChannel.position / _sound.length;                dispatchEvent(new SoundManagerEvent(progress, SoundManagerEvent.PLAYING_PROGRESS_EVENT));            }        }                private function onSoundPlayComplete(e : Event):void        {        	trace("onSoundPlayComplete");        	    		_isPlaying = false;            _lastPosition = 0;        	if (_loop)                play();        	else	        	dispatchEvent(new SoundManagerEvent(1.0, SoundManagerEvent.STOP_EVENT));        }        private function onSoundIoError(event : Event) : void        {            dispatchEvent(new SoundManagerEvent(0, SoundManagerEvent.LOADING_FAILED_EVENT));        }    }}