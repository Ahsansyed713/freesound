package  {    import flash.events.Event;    import flash.events.IOErrorEvent;    import flash.events.ProgressEvent;    import flash.events.TimerEvent;    import flash.media.Sound;    import flash.media.SoundChannel;    import flash.net.URLRequest;    import flash.utils.Timer;        public class BasicSoundManager implements ISoundManager    {        private var _observers : Array;        private var _soundUrl : String;        private var _sound : Sound;        private var _soundChannel : SoundChannel;        private var _timer : Timer;        private var _loop : Boolean;        private var _lastPosition : Number;        private var _isPlaying : Boolean;        private static const TIMER_DELAY : int = 50;        public function BasicSoundManager(soundUrl : String) : void        {            _observers = new Array();        	            _lastPosition = 0;            _isPlaying = false;            _soundUrl = soundUrl;            _sound = new Sound(new URLRequest(_soundUrl));            _sound.addEventListener(Event.COMPLETE, onSoundLoadComplete);            _sound.addEventListener(IOErrorEvent.IO_ERROR, onSoundIoError);            _sound.addEventListener(ProgressEvent.PROGRESS, onSoundLoadProgress);                        _timer = new Timer(TIMER_DELAY);            _timer.addEventListener(TimerEvent.TIMER, onTimerEvent);            _timer.start();        }        public function addSoundManagerObserver(observer : ISoundManagerObserver) : void        {            _observers.push(observer);        }        public function set loop(on : Boolean) : void        {            _loop = on;        }        public function get loop() : Boolean        {            return _loop;        }        public function play() : void        {            if (_isPlaying) return;                        if (_soundChannel)            {                _soundChannel.removeEventListener(Event.SOUND_COMPLETE, onSoundPlayComplete);                _soundChannel = null;            }            _soundChannel = _sound.play(_lastPosition);            _soundChannel.addEventListener(Event.SOUND_COMPLETE, onSoundPlayComplete);            _isPlaying = true;            for each (var observer: ISoundManagerObserver in _observers)            	observer.onSoundManagerPlay();        }        public function get playing() : Boolean        {            return _isPlaying;        }        public function pause() : void        {            _lastPosition = _soundChannel.position;            _soundChannel.stop();            _isPlaying = false;                        for each (var observer: ISoundManagerObserver in _observers)            	observer.onSoundManagerPause();        }        public function stop() : void        {            _lastPosition = 0;            _soundChannel.stop();            _isPlaying = false;                        for each (var observer: ISoundManagerObserver in _observers)            {                observer.onSoundManagerPlaying(0);                observer.onSoundManagerStop();            }        }        private function onSoundLoadProgress(event : ProgressEvent) : void         {            var progress : Number = _sound.bytesLoaded / _sound.bytesTotal;                        for each (var observer: ISoundManagerObserver in _observers)            	observer.onSoundManagerLoading(progress);        }        private function onSoundLoadComplete(event : Event) : void        {            for each (var observer: ISoundManagerObserver in _observers)            	observer.onSoundManagerLoaded();        }        private function onTimerEvent(e : TimerEvent) : void        {            if (_sound && _soundChannel && _isPlaying)            {                var position : Number = _soundChannel.position / _sound.length;                for each (var observer: ISoundManagerObserver in _observers)	            	observer.onSoundManagerPlaying(position);            }        }        private function onSoundPlayComplete(e : Event) : void        {            _isPlaying = false;            _lastPosition = 0;            if (_loop)                play();        	else            {                for each (var observer: ISoundManagerObserver in _observers)                {                    observer.onSoundManagerPlaying(0);                    observer.onSoundManagerStop();                }            }        }        private function onSoundIoError(event : Event) : void        {            for each (var observer: ISoundManagerObserver in _observers)        		observer.onSoundManagerError("Failed loading sound");        }    }}