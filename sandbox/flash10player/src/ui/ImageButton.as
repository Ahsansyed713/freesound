package ui {    import flash.display.Bitmap;    import flash.display.Sprite;    import flash.events.MouseEvent;    import flash.geom.Rectangle;            public class ImageButton extends Sprite implements IButton    {        private var _observers : Vector.<IButtonObserver>;        private var _states : Bitmap;        private var _isToggle : Boolean;        private var _isDown : Boolean;        private var _up : Rectangle;        private var _upHover : Rectangle;        private var _upClick: Rectangle;        private var _down : Rectangle;        private var _downHover : Rectangle;        private var _downClick: Rectangle;        private var _numStates:int;        private var _isHovering : Boolean;		public function ImageButton(states : Bitmap, numStates:int, isToggle : Boolean)        {            if (numStates != 4 && numStates != 6)            	throw Error("Buttons should either have 4 (on/on:hover/off/off:hover) or 6 (on/on:hover/on:clicked/off/off:hover/off:clicked) states");            	            if (numStates == 6 && !isToggle)            	throw Error("Only toggle buttons can have 6 states!");        	buttonMode = true;        	            _observers = new Vector.<IButtonObserver>();            _states = states;            _isToggle = isToggle;            _isDown = false;                        var width : int, height : int;                        width = _states.width;            height = _states.height / numStates;            	            _numStates = numStates;            if (_numStates == 4)            {	            _up = new Rectangle(0, 0, width, height);	            _upHover = new Rectangle(0, height, width, height);	            _down = new Rectangle(0, height * 2, width, height);	            _downHover = new Rectangle(0, height * 3, width, height);	            _upClick = null;	            _downClick = null;            }            else if (_numStates == 6)            {	            _up = new Rectangle(0, 0, width, height);	            _upHover = new Rectangle(0, height, width, height);	            _upClick = new Rectangle(0, height * 2, width, height);	            _down = new Rectangle(0, height * 3, width, height);	            _downHover = new Rectangle(0, height * 4, width, height);	            _downClick = new Rectangle(0, height * 5, width, height);            }                        scrollRect = _up;                        _isHovering = false;            addChild(_states);                        addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);            addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);            addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);            addEventListener(MouseEvent.MOUSE_UP, onMouseUp);        }                public function getSize():Rectangle        {        	return _up;        }        public function addButtonObserver(observer : IButtonObserver) : void        {            _observers.push(observer);        }                public function setState(down:Boolean):void        {        	_isDown = down;        	        	if (_isHovering)        		scrollRect = _isDown ? _downHover : _upHover;        	else        		scrollRect = _isDown ? _down : _up;        }        public function onMouseOver(e : MouseEvent) : void        {        	_isHovering = true;        	            if (_isToggle)            {                if (_isDown)    				scrollRect = _downHover;    			else	    			scrollRect = _upHover;            }    		else            {                this.scrollRect = _upHover;            }        }        public function onMouseOut(e : MouseEvent) : void        {        	_isHovering = false;        	            if (_isToggle)            {                if (_isDown)    				this.scrollRect = _down;    			else	    			this.scrollRect = _up;            }    		else            {                this.scrollRect = _up;            }        }        public function onMouseDown(e : MouseEvent) : void        {        	var observer:IButtonObserver;        	            if (_isToggle)            {                if (_isDown)                {                    if (_numStates == 6)                    {                    	this.scrollRect = _downClick;                    }                    else                    {	                    for each (observer in _observers)	    					observer.onButtonUp(this);    					                    	scrollRect = _upHover;                    	_isDown = false;                    }                }    			else                {                    if (_numStates == 6)                    {                    	this.scrollRect = _upClick;                    }					else					{	                    for each (observer in _observers)	    					observer.onButtonDown(this);						scrollRect = _downHover;						_isDown = true;					}                }            }    		else            {                for each (observer in _observers)					observer.onButtonDown(this);                _isDown = true;                scrollRect = _downHover;            }            e.stopPropagation();        }        public function onMouseUp(e : MouseEvent) : void        {        	var observer:IButtonObserver;        	        	if (_isToggle)        	{        		if (_numStates == 6)        		{        			if (_isDown)        			{        				_isDown = false;        				scrollRect = _upHover;			            for each (observer in _observers)							observer.onButtonUp(this);        			}        			else        			{        				_isDown = true;        				scrollRect = _downHover;			            for each (observer in _observers)							observer.onButtonDown(this);        			}        		}        	}            else            {                _isDown = false;                scrollRect = _upHover;	            for each (observer in _observers)					observer.onButtonUp(this);            }            e.stopPropagation();        }        override public function toString() : String        {            return "_isToggle: " + _isToggle.toString() + " _isDown: " + _isDown.toString() + " rect: " + scrollRect.toString();        }    }}