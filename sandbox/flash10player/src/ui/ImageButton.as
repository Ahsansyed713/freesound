package ui {    import flash.display.Bitmap;    import flash.display.Sprite;    import flash.events.MouseEvent;    import flash.geom.Rectangle;            public class ImageButton extends Sprite implements IButton    {        private var _observers : Vector.<IButtonObserver>;        private var _states : Bitmap;        private var _isToggle : Boolean;        private var _isDown : Boolean;        private var _up : Rectangle;        private var _upHover : Rectangle;        private var _down : Rectangle;        private var _downHover : Rectangle;        public function ImageButton(states : Bitmap, isToggle : Boolean = false)        {            _observers = new Vector.<IButtonObserver>();            _states = states;            _isToggle = isToggle;            _isDown = false;                        var width : int, height : int;                        width = _states.width;            if (_isToggle)            	height = _states.height / 4;            else            	height = _states.height / 3;             _up = new Rectangle(0, 0, width, height);            _upHover = new Rectangle(0, height, width, height);            _down = new Rectangle(0, height * 2, width, height);            _downHover = new Rectangle(0, height * 3, width, height);                        scrollRect = _up;            addChild(_states);                        addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);            addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);            addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);            addEventListener(MouseEvent.MOUSE_UP, onMouseUp);        }        public function addButtonObserver(observer : IButtonObserver) : void        {            _observers.push(observer);        }                public function setState(down:Boolean):void        {        	_isDown = down;        	scrollRect = _isDown ? _down : _up;        }        public function onMouseOver(e : MouseEvent) : void        {            if (_isToggle)            {                if (_isDown)    				scrollRect = _downHover;    			else	    			scrollRect = _upHover;            }    		else            {                this.scrollRect = _upHover;            }            e.stopImmediatePropagation();        }        public function onMouseOut(e : MouseEvent) : void        {            if (_isToggle)            {                if (_isDown)    				this.scrollRect = _down;    			else	    			this.scrollRect = _up;            }    		else            {                this.scrollRect = _up;            }            e.stopImmediatePropagation();        }        public function onMouseDown(e : MouseEvent) : void        {            if (_isToggle)            {                if (_isDown)                {                    _isDown = false;                    for each (var observer:IButtonObserver in _observers)    					observer.onButtonUp(this);                    this.scrollRect = _up;                }    			else                {                    _isDown = true;                    for each (var observer:IButtonObserver in _observers)    					observer.onButtonDown(this);                    this.scrollRect = _down;                }            }    		else            {                for each (var observer:IButtonObserver in _observers)					observer.onButtonDown(this);                _isDown = true;                scrollRect = _down;            }            e.stopImmediatePropagation();        }        public function onMouseUp(e : MouseEvent) : void        {            if (!_isToggle)            {                for each (var observer:IButtonObserver in _observers)					observer.onButtonUp(this);                _isDown = false;                scrollRect = _up;            }            e.stopImmediatePropagation();        }        override public function toString() : String        {            return "_isToggle: " + _isToggle.toString() + " _isDown: " + _isDown.toString() + " rect: " + scrollRect.toString();        }    }}