package ui {    import flash.display.Sprite;    import flash.events.TimerEvent;    import flash.utils.Timer;        /**     * @author bram     */    public class PlayerControls extends Sprite implements IButtonObserver    {    	private var _observers : Vector.<IPlayerControlsObserver>;        private var _hidingSprite : Sprite;        [Embed(source='../../media/play.png')]        private var PlayButtonImage : Class;        private var _playButton : ImageButton;        [Embed(source='../../media/stop.png')]        private var StopButtonImage : Class;        private var _stopButton : ImageButton;        [Embed(source='../../media/spectral.png')]        private var SpectralButtonImage : Class;        private var _spectralButton : ImageButton;        [Embed(source='../../media/loop.png')]        private var LoopButtonImage : Class;        private var _loopButton : ImageButton;                private var _direction:Number = 0;        private var _maxHeight:int = 0;        public function PlayerControls()        {        	_observers = new Vector.<IPlayerControlsObserver>();        	_hidingSprite = new Sprite();                        var padding:int = 3;            _playButton = new ImageButton(new PlayButtonImage(), true);            _playButton.addButtonObserver(this);            _playButton.x = 0;            _playButton.y = 0;            addChild(_playButton);                        _hidingSprite = new Sprite();        	            _stopButton = new ImageButton(new StopButtonImage());            _stopButton.addButtonObserver(this);            _stopButton.x = _playButton.x + _playButton.width + padding;            _stopButton.y = 0;            _hidingSprite.addChild(_stopButton);            _spectralButton = new ImageButton(new SpectralButtonImage(), true);            _spectralButton.addButtonObserver(this);            _spectralButton.x = _stopButton.x + _stopButton.width + padding;            _spectralButton.y = 0;            _hidingSprite.addChild(_spectralButton);            _loopButton = new ImageButton(new LoopButtonImage(), true);            _loopButton.addButtonObserver(this);            _loopButton.x = _spectralButton.x + _spectralButton.width + padding;            _loopButton.y = 0;            _hidingSprite.addChild(_loopButton);                        _maxHeight = Math.max(_loopButton.getSize().height, _spectralButton.getSize().height, _stopButton.getSize().height);            _hidingSprite.y = _maxHeight;                        var timer:Timer = new Timer(10);            timer.addEventListener(TimerEvent.TIMER, function (e:TimerEvent) : void {            	if (_direction < 0 && _hidingSprite.y > 0)            	{            		_hidingSprite.y += _direction;            	}            	if (_direction > 0 && _hidingSprite.y < _maxHeight)            	{            		_hidingSprite.y += _direction;            	}            	            	if (_hidingSprite.y > _maxHeight)            		_hidingSprite.y = _maxHeight;            		            	if (_hidingSprite.y < 0)            		_hidingSprite.y = 0;            });            timer.start();                        addChild(_hidingSprite);        }        public function setPlayButtonState(playing:Boolean) : void        {            _playButton.setState(playing);        }                public function showControls():void        {        	_direction = -_maxHeight/9.0;        }                public function hideControls():void        {        	_direction = _maxHeight/50.0;        }        public function addPlayerControlsObserver(observer:IPlayerControlsObserver):void        {        	_observers.push(observer);        }                public function getMaxHeight():int        {        	return _maxHeight;        }        public function onButtonDown(button : IButton) : void        {        	for each (var observer:IPlayerControlsObserver in _observers)        	{	            switch (button)	            {	                case _playButton: observer.playClicked(this); break;	                case _stopButton: observer.stopClicked(this); break;	                case _spectralButton: observer.spectralClicked(this); break;			        case _loopButton: observer.loopOnClicked(this); break;	            }        	}        }                public function onButtonUp(button:IButton):void        {        	for each (var observer:IPlayerControlsObserver in _observers)        	{	            switch (button)	            {	                case _playButton: observer.pauseClicked(this); break;	                case _spectralButton: observer.waveformClicked(this); break;			        case _loopButton: observer.loopOffClicked(this); break;	            }        	}        }    }}