package ui {	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.filters.ColorMatrixFilter;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.net.URLRequest;			/**     * @author bram     */    public class SwappingBackground extends Sprite     {        public static const ID_WAVEFORM : int = 0;        public static const ID_SPECTRAL : int = 1;        private var _waveformUrl : String;        private var _waveformImage : Bitmap;        private var _waveformImageDesaturated : Bitmap;        private var _spectralUrl : String;        private var _spectralImage : Bitmap;        private var _spectralImageDesaturated : Bitmap;        private var _progress : Sprite;        private var _progressRect : Rectangle;        private var _background : Sprite;                private var _isShowingWaveform:Boolean;        public function SwappingBackground(width : int, height : int, waveformUrl : String, spectralUrl : String)        {            _waveformUrl = waveformUrl;            _spectralUrl = spectralUrl;            _background = new Sprite();            _background.graphics.beginFill(0x36393D);            _background.graphics.drawRect(0, 0, width, height);            addChild(_background);                        _progressRect = new Rectangle(0, 0, width / 2, height / 8);            _progress = new Sprite();            _progress.x = width / 4;            _progress.y = (height * 7) / 16;            addChild(_progress);                        _isShowingWaveform = true;                        loadWaveformImage();        }        public function getCurrentDisplay() : int        {        	if (_isShowingWaveform)        		return ID_WAVEFORM;        	else        		return ID_SPECTRAL;        }        private function removeBackgrounds() : void        {            if (_spectralImage)            	_spectralImage.visible = false;            if (_waveformImage)				_waveformImage.visible = false;        }        public function setWaveformImage() : void        {            removeBackgrounds();            if (_waveformImage)				_waveformImage.visible = true;			_isShowingWaveform = true;        }        public function setSpectralImage() : void        {            removeBackgrounds();            if (!_spectralImage)        		loadSpectralImage();        		            if (_spectralImage)				_spectralImage.visible = true;							_isShowingWaveform = false;        }                /*		s - typical values come in the range 0.0 ... 2.0 where		0.0 means 0% Saturation		0.5 means 50% Saturation		1.0 is 100% Saturation (aka no change)		2.0 is 200% Saturation		*/		public function saturationColormatrixFilter( s:Number ):ColorMatrixFilter		{		    var LUMA_R:Number = 0.212671;		    var LUMA_G:Number = 0.71516;		    var LUMA_B:Number = 0.072169;		            		    var sInv:Number = (1 - s);		    var irlum:Number = (sInv * LUMA_R);		    var iglum:Number = (sInv * LUMA_G);		    var iblum:Number = (sInv * LUMA_B);		    		    return new ColorMatrixFilter(		    [		        (irlum + s), iglum,       iblum,       0, 0, 		    	irlum,       (iglum + s), iblum,       0, 0, 		    	irlum,       iglum,       (iblum + s), 0, 0, 		    	0,           0,           0,           1, 0		    ]);		}         private function loadWaveformImage() : void        {            loadImage(_waveformUrl, function (bitmap : Bitmap) : void             {            	if (bitmap)            	{	                _waveformImage = bitmap;					_waveformImage.visible = false;	                					_background.addChild(_waveformImage);	                setWaveformImage();            	}            });        }                private function loadSpectralImage() : void        {            loadImage(_spectralUrl, function (bitmap : Bitmap) : void             {            	if (bitmap)            	{	                _spectralImage = bitmap;					_spectralImage.visible = false;	                _background.addChild(_spectralImage);		            setSpectralImage();            	}            });        }        public function setLoadProgress(progress:Number):void        {			if (progress < 1.0)			{	        	if (getCurrentDisplay() == ID_SPECTRAL)	        	{		            if (!_spectralImageDesaturated && _spectralImage)		            {			            _spectralImageDesaturated = new Bitmap(_spectralImage.bitmapData.clone());			            _spectralImageDesaturated.bitmapData.applyFilter(_spectralImageDesaturated.bitmapData, _spectralImageDesaturated.bitmapData.rect, new Point(0,0), saturationColormatrixFilter(0.2));			            _background.addChild(_spectralImageDesaturated);		            }		            		            if (_spectralImageDesaturated)		            {						_spectralImageDesaturated.scrollRect = new Rectangle(int(_spectralImage.width * progress), 0, int(_spectralImage.width * (1.0-progress)), _spectralImage.height);						_spectralImageDesaturated.x = int(_spectralImage.width * progress);						_spectralImageDesaturated.visible = true;		            }					if (_waveformImageDesaturated)						_waveformImageDesaturated.visible = false;	        	}	        	else if (getCurrentDisplay() == ID_WAVEFORM)	        	{		            if (!_waveformImageDesaturated && _waveformImage)		            {			            _waveformImageDesaturated = new Bitmap(_waveformImage.bitmapData.clone());			            _waveformImageDesaturated.bitmapData.applyFilter(_waveformImageDesaturated.bitmapData, _waveformImageDesaturated.bitmapData.rect, new Point(0,0), saturationColormatrixFilter(0.2));			            _background.addChild(_waveformImageDesaturated);		            }		            		            if (_waveformImageDesaturated)		            {						_waveformImageDesaturated.scrollRect = new Rectangle(int(_waveformImage.width * progress), 0, int(_waveformImage.width * (1.0-progress)), _waveformImage.height);						_waveformImageDesaturated.x = int(_waveformImage.width * progress);						_waveformImageDesaturated.visible = true;		            }					if (_spectralImageDesaturated)						_spectralImageDesaturated.visible = false;	        	}			}			else			{    			if (_waveformImageDesaturated && _background.contains(_waveformImageDesaturated))       				_background.removeChild(_waveformImageDesaturated);    			if (_spectralImageDesaturated && _background.contains(_spectralImageDesaturated))       				_background.removeChild(_spectralImageDesaturated);			}        }        private function loadImage(url : String, callback : Function) : void        {            var loader : Loader = new Loader();            _progress.graphics.beginFill(0xffffff, 0.9);            _progress.graphics.drawRoundRect(0, 0, _progressRect.width, _progressRect.height, 4, 4);            loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, function (e : ProgressEvent) : void            {                var p : Number = e.bytesLoaded / e.bytesTotal;                _progress.graphics.clear();                _progress.graphics.beginFill(0xffffff, 0.9);                _progress.graphics.drawRoundRect(_progressRect.width * p, 0, _progressRect.width * (1 - p), _progressRect.height, 4, 4);            });            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function (e : Event) : void             {                _progress.graphics.clear();                callback(Bitmap(loader.content));            });                        loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, function (e : IOErrorEvent) : void            {                _progress.graphics.clear();                callback(null);            });                        loader.load(new URLRequest(url));        }    }}