package ui {    import flash.display.Bitmap;    import flash.display.BitmapData;    import flash.display.Loader;    import flash.display.Sprite;    import flash.events.Event;    import flash.events.IOErrorEvent;    import flash.events.ProgressEvent;    import flash.geom.Rectangle;    import flash.net.URLRequest;        /**     * @author bram     */    public class SwappingBackground extends Sprite     {        private var _waveformUrl : String;        private var _waveformImage : Bitmap;        private var _spectralUrl : String;        private var _spectralImage : Bitmap;        private var _progress : Sprite;        private var _progressRect:Rectangle;        private var _background:Sprite;    	        public function SwappingBackground(width:int, height:int, waveformUrl : String, spectralUrl : String)        {            _waveformUrl = waveformUrl;            _spectralUrl = spectralUrl;        	_background = new Sprite();        	_background.graphics.beginFill(0x36393D);        	_background.graphics.drawRect(0,0,width,height);        	addChild(_background);                        _progressRect = new Rectangle(0, 0, width/2, height/8);            _progress = new Sprite();            _progress.x = width/4;            _progress.y = (height*7)/16;            addChild(_progress);                        loadWaveformImage();        }                private function removeBackgrounds():void        {			if (_spectralImage && _background.contains(_spectralImage))				_background.removeChild(_spectralImage);			if (_waveformImage && _background.contains(_waveformImage))				_background.removeChild(_waveformImage);        }		public function setWaveformImage():void		{			removeBackgrounds();			if (_waveformImage)				addChild(_waveformImage);		}		public function setSpectralImage():void		{            if (!_spectralImage)        		loadSpectralImage();			removeBackgrounds();			if (_spectralImage)				addChild(_spectralImage);		}        private function loadWaveformImage() : void        {            loadImage(_waveformUrl, function (bitmap:Bitmap) : void {                _waveformImage = bitmap;                _background.addChild(_waveformImage);            });        }        private function loadSpectralImage() : void        {            loadImage(_spectralUrl, function (bitmap:Bitmap) : void {                _spectralImage = bitmap;                _background.addChild(_spectralImage);            });        }        		private function loadImage(url:String, callback:Function) : void		{			var loader : Loader = new Loader();            _progress.graphics.beginFill(0xffffff, 0.9);            _progress.graphics.drawRoundRect(0, 0, _progressRect.width, _progressRect.height, 4, 4);            loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, function (e : ProgressEvent) : void            {            	var p:Number = e.bytesLoaded / e.bytesTotal;				_progress.graphics.clear();	            _progress.graphics.beginFill(0xffffff, 0.9);    	        _progress.graphics.drawRoundRect(_progressRect.width * p, 0, _progressRect.width * (1 - p), _progressRect.height, 4, 4);            });            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function (e : Event) : void             {				_progress.graphics.clear();                callback(Bitmap(loader.content));            });                        loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, function (e : IOErrorEvent) : void            {            	_progress.graphics.clear();            	var tmp:Bitmap = new Bitmap(new BitmapData( url.length * 8, 35, true, 0x00000000));            	DText.draw(tmp.bitmapData, "Could not load image:\n" + url, 0, 0, DText.LEFT);            	tmp.x = 50;            	tmp.y = 50;            	callback(tmp);            });            	        loader.load(new URLRequest(url));		}    }}