package ui{    import flash.display.Sprite;    import flash.events.MouseEvent;        /**     * @author bram     */    public class SoundDisplay extends Sprite    {        private var _observers : Vector.<ISoundDisplayObserver>;        private var _loading : Sprite;        private var _playing : Sprite;        private var _mapping : Vector.<Number>;        private var _background : SwappingBackground;        private var _timeDisplay : TimeDisplay;        private var _playerControls : PlayerControls;        public function SoundDisplay(width : int, height : int, waveformUrl : String, spectralUrl : String, duration : Number)        {        	createMapping();        	            _observers = new Vector.<ISoundDisplayObserver>();            _background = new SwappingBackground(width, height, waveformUrl, spectralUrl);            addChild(_background);        	            _timeDisplay = new TimeDisplay(duration);            _timeDisplay.x = width - _timeDisplay.width;            _timeDisplay.y = height - _timeDisplay.height;             addChild(_timeDisplay);        	            _loading = new Sprite();            _loading.graphics.beginFill(0xff0000, 0.5);            _loading.graphics.drawRect(0, 0, width, height);        	            _playing = new Sprite();            _playing.graphics.lineStyle(2, 0xffffff, 0.7);            _playing.graphics.moveTo(0, 0);            _playing.graphics.lineTo(0, height - 1);            _playing.x = 20;                        _playerControls = new PlayerControls();            _playerControls.y = height - _playerControls.getMaxHeight();            addChild(_playerControls);                        addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);            addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);            addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);        }        public function onMouseDown(e : MouseEvent) : void        {            for each (var observer:ISoundDisplayObserver in _observers)            	observer.onSoundDisplayClick(this, e.stageX / width);        }        public function onMouseOver(e : MouseEvent) : void        {            _playerControls.showControls();        }                public function onMouseOut(e : MouseEvent) : void        {            _playerControls.hideControls();        }        public function setLoading(procent : Number) : void        {            if (procent >= 1.0)            {                if (contains(_loading))        			removeChild(_loading);                return;            }        	            if (!contains(_loading))	        	addChild(_loading);            _loading.graphics.clear();            _loading.graphics.beginFill(0xffffff, 0.5);            _loading.graphics.drawRect(width * procent, 0, width * (1.0 - procent), height);        }        public function setPlaying(procent : Number, time : Number) : void        {            if (!contains(_playing))	        	addChild(_playing);            if (procent >= 0 && procent < 1)                _playing.x = width * procent;            else                _playing.x = 0;                        _timeDisplay.update(time);        }        public function setWaveformBackground() : void        {            _background.setWaveformImage();        }        public function setSpectralBackground() : void        {            _background.setSpectralImage();        }        public function setSoundDuration(duration : Number) : void        {            _timeDisplay.setDuration(duration);        }                public function setPlayButtonState(playing:Boolean) : void        {            _playerControls.setPlayButtonState(playing);        }        public function addSoundDisplayObserver(observer : ISoundDisplayObserver) : void        {            _observers.push(observer);        }                public function addPlayerControlsObserver(observer : IPlayerControlsObserver) : void        {            _playerControls.addPlayerControlsObserver(observer);        }        private function createMapping() : void        {            _mapping = new Vector.<Number>();    		            var f_min : Number = 100.0;            var f_max : Number = 22050.0;            var y_min : Number = Math.log(f_min) * Math.LOG10E;            var y_max : Number = Math.log(f_max) * Math.LOG10E;	                    for (var y : int = height - 1;y >= 0; y--)            {                var freq : Number = Math.pow(10.0, y_min + y / (height - 1.0) * (y_max - y_min));                _mapping.push(freq);            }        }    }}