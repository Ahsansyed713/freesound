package ui{    import flash.events.MouseEvent;        import flash.display.Bitmap;    import flash.display.Loader;    import flash.display.Sprite;    import flash.events.Event;    import flash.events.IOErrorEvent;    import flash.net.URLRequest;        /**     * @author bram     */    public class SoundDisplay extends Sprite    {    	private var _observers:Vector.<ISoundDisplayObserver>;        private var _waveformUrl : String;        private var _waveformImage : Bitmap;        private var _spectralUrl : String;        private var _spectralImage : Bitmap;        private var _loading : Sprite;        private var _playing : Sprite;        private var _background : Sprite;        private var _mapping : Vector.<Number>;        private var _duration : Number;        public function SoundDisplay(width : int, height : int, waveformUrl : String, spectralUrl : String)        {        	_observers = new Vector.<ISoundDisplayObserver>();        	        	_duration = 0;        	            _mapping = new Vector.<Number>();    		            var f_min : Number = 100.0;            var f_max : Number = 22050.0;            var y_min : Number = Math.log(f_min) * Math.LOG10E;            var y_max : Number = Math.log(f_max) * Math.LOG10E;	                    for (var y:int = height-1;y >=0; y--)            {                var freq : Number = Math.pow(10.0, y_min + y / (height - 1.0) * (y_max - y_min));                _mapping.push(freq);            }            _background = new Sprite();            addChild(_background);        	            _waveformUrl = waveformUrl;            _spectralUrl = spectralUrl;        	            _loading = new Sprite();            _loading.graphics.beginFill(0xff0000, 0.5);            _loading.graphics.drawRect(0, 0, width, height);        	            _playing = new Sprite();            _playing.graphics.lineStyle(2, 0xffffff, 0.7);            _playing.graphics.moveTo(0, 0);            _playing.graphics.lineTo(0, height - 1);            _playing.x = 20;        	            loadWaveformImage();        	            addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);            addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);        }                public function addSoundDisplayObserver(observer:ISoundDisplayObserver):void        {        	_observers.push(observer);        }                public function setSoundDuration(duration:Number):void        {        	_duration = duration;        }        public function onMouseDown(e : MouseEvent) : void        {            for each (var observer:ISoundDisplayObserver in _observers)            	observer.onClick(this, e.stageX/width);        }        public function onMouseMove(e : MouseEvent) : void        {            //trace(e.stageX*_duration/width, _mapping[e.stageY]);        }        public function setLoading(procent : Number) : void        {            if (procent >= 1.0)            {                if (contains(_loading))        			removeChild(_loading);                return;            }        	            if (!contains(_loading))	        	addChild(_loading);            _loading.graphics.clear();            _loading.graphics.beginFill(0xffffff, 0.5);            _loading.graphics.drawRect(width * procent, 0, width * (1.0 - procent), height);        }        public function setPlaying(procent : Number) : void        {            if (procent <= 1)            {                if (!contains(_playing))		        	addChild(_playing);                _playing.x = width * procent;            }        }        public function swapDisplayImage() : void        {            if (!_spectralImage)        		loadSpectralImage();        		            if (_waveformImage && _spectralImage)    			_background.swapChildren(_waveformImage, _spectralImage);        }        private function loadWaveformImage() : void        {            var loader : Loader = new Loader();            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function (e : Event) : void             {                _waveformImage = Bitmap(loader.content);                _background.addChild(_waveformImage);            });            loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);            loader.load(new URLRequest(_waveformUrl));        }        private function loadSpectralImage() : void        {            var loader : Loader = new Loader();            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function (e : Event) : void             {                _spectralImage = Bitmap(loader.content);                _background.addChild(_spectralImage);            });            loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);            loader.load(new URLRequest(_spectralUrl));        }        private function onIOError(e : IOErrorEvent) : void        {    		// TODO: add a nice text saying that the image could not be loaded        }    }}