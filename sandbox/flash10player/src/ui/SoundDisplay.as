package ui{    import flash.display.Bitmap;    import flash.display.BitmapData;    import flash.display.Sprite;    import flash.events.MouseEvent;    import flash.geom.Rectangle;        /**     * @author bram     */    public class SoundDisplay extends Sprite    {        private var _observers : Vector.<ISoundDisplayObserver>;        private var _loading : Sprite;        private var _playing : Sprite;        private var _mapping : Vector.<Number>;        private var _background : SwappingBackground;        private var _timeDisplay : TimeDisplay;        private var _playerControls : PlayerControls;        private var _measureReadout : Bitmap;        private var _showMeasureReadout : Boolean;        private var _width : int;        private var _height : int;        public function SoundDisplay(width : int, height : int, waveformUrl : String, spectralUrl : String, duration : Number)        {            _width = width;            _height = height;        	            createMapping(height);        	            _observers = new Vector.<ISoundDisplayObserver>();            _background = new SwappingBackground(width, height, waveformUrl, spectralUrl);            addChild(_background);        	            _timeDisplay = new TimeDisplay(duration);            _timeDisplay.x = width - _timeDisplay.width - 3;            _timeDisplay.y = height - _timeDisplay.height;             addChild(_timeDisplay);        	            _loading = new Sprite();            _loading.x = 0;            _loading.y = (height * 7) / 16;        	            _playing = new Sprite();            _playing.graphics.lineStyle(2, 0xffffff, 0.7);            _playing.graphics.moveTo(0, 0);            _playing.graphics.lineTo(0, height - 1);                        _playerControls = new PlayerControls();            _playerControls.y = height - _playerControls.getMaxHeight();            addChild(_playerControls);                        _measureReadout = new Bitmap(new BitmapData(200, 35, true, 0x00000000));            _showMeasureReadout = false;        	            addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);            addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);            addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);        }        public function measureReadout(on : Boolean) : void        {            _showMeasureReadout = on;            if (on)            {                addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);                if (!contains(_measureReadout))        			addChild(_measureReadout);            }        	else            {                removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);                if (contains(_measureReadout))	        		removeChild(_measureReadout);            }        }        public function onMouseDown(e : MouseEvent) : void        {            for each (var observer:ISoundDisplayObserver in _observers)            	observer.onSoundDisplayClick(this, e.stageX / width);        }        public function onMouseOver(e : MouseEvent) : void        {            if (_showMeasureReadout && !contains(_measureReadout))            {    			addChild(_measureReadout);            }        }        public function onMouseOut(e : MouseEvent) : void        {            if (contains(_measureReadout))            {        		removeChild(_measureReadout);            }        }        public function onMouseMove(e : MouseEvent) : void        {            _measureReadout.x = e.stageX + 15;            _measureReadout.y = e.stageY + 15;        	            if (_measureReadout.y + 35 > _height)        		_measureReadout.y = e.stageY - 15;        	            if (_measureReadout.x + 160 > _width)        		_measureReadout.x = e.stageX - 160;            _measureReadout.bitmapData.fillRect(new Rectangle(0, 0, _measureReadout.width, _measureReadout.height), 0x000000);                        var readout:String;                        if (_background.getCurrentDisplay() == SwappingBackground.ID_SPECTRAL)            {            	readout = _mapping[int(e.stageY)].toFixed(2) + "hz";            }            else            {            	if (e.stageY == _height/2)            	{            		readout = "-inf db";            	}            	else            	{            		var lin:Number = Math.abs((e.stageY - _height/2)/(_height/2));	            	var db:Number = 20 * Math.log(lin) * Math.LOG10E;	            	readout = db.toFixed(2) + "db";            	}            }                        readout += " @ " + TimeDisplay.timeToString((_timeDisplay.duration * e.stageX)/_width);        	            DText.draw(_measureReadout.bitmapData, readout, 0, 0, DText.LEFT);        }        public function setLoading(procent : Number) : void        {            if (procent >= 1.0)            {                if (contains(_loading))        			removeChild(_loading);                return;            }        	            if (!contains(_loading))	        	addChild(_loading);            _loading.graphics.clear();            _loading.graphics.beginFill(0xffffff, 0.5);            _loading.graphics.drawRoundRect(_width * procent, 0, _width * (1.0 - procent), _height/8, 3, 3);        }        public function setPlaying(procent : Number, time : Number) : void        {            _timeDisplay.update(time);        	            if (procent == 0 && time == 0)            {                if (contains(_playing))	        		removeChild(_playing);                return;            }        	            if (!contains(_playing))	        	addChild(_playing);            if (procent >= 0 && procent < 1)                _playing.x = _width * procent;            else                _playing.x = 0;        }        public function setWaveformBackground() : void        {            _background.setWaveformImage();        }        public function setSpectralBackground() : void        {            _background.setSpectralImage();        }        public function setSoundDuration(duration : Number) : void        {            _timeDisplay.duration = duration;        }        public function setPlayButtonState(playing : Boolean) : void        {            _playerControls.setPlayButtonState(playing);        }        public function addSoundDisplayObserver(observer : ISoundDisplayObserver) : void        {            _observers.push(observer);        }        public function addPlayerControlsObserver(observer : IPlayerControlsObserver) : void        {            _playerControls.addPlayerControlsObserver(observer);        }        private function createMapping(height : int) : void        {            _mapping = new Vector.<Number>();    		            var y_min : Number = Math.log(100.0) * Math.LOG10E;            var y_max : Number = Math.log(22050.0) * Math.LOG10E;	                    for (var y : int = height - 1;y >= 0; y--)            {                var freq : Number = Math.pow(10.0, y_min + y / (height - 1.0) * (y_max - y_min));                _mapping.push(freq);            }        }        public function displayErrorMessage(message : String) : void        {            var tmp : Bitmap = new Bitmap(new BitmapData(message.length * 8, 35, true, 0x00000000));            DText.draw(tmp.bitmapData, message, 0, 0, DText.LEFT);            tmp.x = 50;            tmp.y = 50;            addChild(tmp);        }    }}