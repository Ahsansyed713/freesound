package ui{    import flash.display.Bitmap;    import flash.display.BitmapData;    import flash.display.Loader;    import flash.display.PixelSnapping;    import flash.display.Sprite;    import flash.events.Event;    import flash.events.IOErrorEvent;    import flash.events.MouseEvent;    import flash.geom.Rectangle;    import flash.net.URLRequest;        /**     * @author bram     */    public class SoundDisplay extends Sprite    {        private var _observers : Vector.<ISoundDisplayObserver>;        private var _waveformUrl : String;        private var _waveformImage : Bitmap;        private var _spectralUrl : String;        private var _spectralImage : Bitmap;        private var _loading : Sprite;        private var _playing : Sprite;        private var _background : Sprite;        private var _mapping : Vector.<Number>;        private var _duration : Number;        private var _timeDisplay:Bitmap;        private var _inverseTime : Boolean;        private var _measureDisplay:Bitmap;        public function SoundDisplay(width : int, height : int, waveformUrl : String, spectralUrl : String, durationEstimate:Number)        {            _observers = new Vector.<ISoundDisplayObserver>();            _mapping = new Vector.<Number>();    		            var f_min : Number = 100.0;            var f_max : Number = 22050.0;            var y_min : Number = Math.log(f_min) * Math.LOG10E;            var y_max : Number = Math.log(f_max) * Math.LOG10E;	                    for (var y : int = height - 1;y >= 0; y--)            {                var freq : Number = Math.pow(10.0, y_min + y / (height - 1.0) * (y_max - y_min));                _mapping.push(freq);            }            _background = new Sprite();            addChild(_background);        	            _waveformUrl = waveformUrl;            _spectralUrl = spectralUrl;        	            _loading = new Sprite();            _loading.graphics.beginFill(0xff0000, 0.5);            _loading.graphics.drawRect(0, 0, width, height);        	            _playing = new Sprite();            _playing.graphics.lineStyle(2, 0xffffff, 0.7);            _playing.graphics.moveTo(0, 0);            _playing.graphics.lineTo(0, height - 1);            _playing.x = 20;            	        _timeDisplay = new Bitmap(new BitmapData( 200, 16, true, 0x00000000));            _timeDisplay.x = width - _timeDisplay.width - 3;            _timeDisplay.y = height - _timeDisplay.height;            _timeDisplay.addEventListener(MouseEvent.MOUSE_DOWN, onTimeDisplayClicked);            addChild(_timeDisplay);            	        _measureDisplay = new Bitmap(new BitmapData( 200, 16, true, 0x00000000));            addChild(_timeDisplay);            _inverseTime = true;            _duration = durationEstimate;            updateTimeDisplay(0);        	            loadWaveformImage();        	            addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);            addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);            addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);            addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);        }        public function addSoundDisplayObserver(observer : ISoundDisplayObserver) : void        {            _observers.push(observer);        }        public function setSoundDuration(duration : Number) : void        {            _duration = duration;        }                public function onTimeDisplayClicked(e:MouseEvent):void        {        	trace("hellooooooooo???");        }        public function onMouseDown(e : MouseEvent) : void        {			if (e.target == _timeDisplay)			{	        	trace("click");	        	_inverseTime = !_inverseTime;	        	e.stopImmediatePropagation();			}			else			{	            for each (var observer:ISoundDisplayObserver in _observers)	            	observer.onSoundDisplayClick(this, e.stageX / width);			}        }        public function onMouseMove(e : MouseEvent) : void        {            //trace(e.stageX*_duration/width, _mapping[e.stageY]);        }        public function onMouseOver(e : MouseEvent) : void        {        	if (!contains(_measureDisplay))        	{        		addChild(_measureDisplay);        		_measureDisplay.x = e.stageX + 10;        		_measureDisplay.y = e.stageX + 10;        	}        }        public function onMouseOut(e : MouseEvent) : void        {        }        public function setLoading(procent : Number) : void        {            if (procent >= 1.0)            {                if (contains(_loading))        			removeChild(_loading);                return;            }        	            if (!contains(_loading))	        	addChild(_loading);            _loading.graphics.clear();            _loading.graphics.beginFill(0xffffff, 0.5);            _loading.graphics.drawRect(width * procent, 0, width * (1.0 - procent), height);        }        public function setPlaying(procent : Number, time : Number) : void        {            if (procent <= 1)            {                if (!contains(_playing))		        	addChild(_playing);                _playing.x = width * procent;            }            updateTimeDisplay(time);        }                public function updateTimeDisplay(time:Number):void        {        	var display:String = _inverseTime ? "-" + timeToDisplay(_duration - time) : timeToDisplay(time);            _timeDisplay.bitmapData.fillRect(new Rectangle(0,0,_timeDisplay.width, _timeDisplay.height), 0x00000000);            DText.draw(_timeDisplay.bitmapData, display, 200, 0, DText.RIGHT);        }                private function timeToDisplay(time:Number):String        {        	var minutes:int = time/(60*1000);        	time -= minutes*60*1000;        	var seconds:int = time/(1000);        	time -= seconds*1000;        	var miliseconds:int = time;        	var display:String = minutes.toString() + ":";        	if (seconds < 10)        		display += "0";        	display += seconds.toString() + ":";        	if (miliseconds < 100)        		display += "0";        	if (miliseconds < 10)        		display += "0";			display += miliseconds.toString();						return display;        	        }        public function swapDisplayImage() : void        {            if (!_spectralImage)        		loadSpectralImage();        		            if (_waveformImage && _spectralImage)    			_background.swapChildren(_waveformImage, _spectralImage);        }        private function loadWaveformImage() : void        {            var loader : Loader = new Loader();            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function (e : Event) : void             {                _waveformImage = Bitmap(loader.content);                _background.addChild(_waveformImage);            });            loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);            loader.load(new URLRequest(_waveformUrl));        }        private function loadSpectralImage() : void        {            var loader : Loader = new Loader();            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function (e : Event) : void             {                _spectralImage = Bitmap(loader.content);                _background.addChild(_spectralImage);            });            loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);            loader.load(new URLRequest(_spectralUrl));        }        private function onIOError(e : IOErrorEvent) : void        {    		// TODO: add a nice text saying that the image could not be loaded        }    }}